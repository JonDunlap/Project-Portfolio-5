{"version":3,"sources":["components/ToggleButton.js","components/Day.js","components/Main.js","components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["ToggleButton","convertToFahrenheit","setConvertToFahrenheit","Grid","container","sm","md","direction","item","Typography","Switch","color","checked","onChange","useStyles","makeStyles","theme","paper","width","padding","spacing","modal","margin","marginTop","Day","date","day","city","state","timezone","convertTemp","convertSpeed","localizeShortDate","localizeTime","imageURL","Sunset","Sunrise","useState","open","setOpen","classes","handleClose","ButtonBase","focusRipple","onClick","Paper","className","xs","alt","src","weather","icon","variant","dt","temp","max","min","description","wind_deg","wind_speed","Modal","onClose","aria-labelledby","aria-describedby","justify","alignItems","id","Date","toLocaleDateString","weekday","year","month","timeZone","IconButton","aria-label","fontSize","size","title","sunrise","sunset","pressure","humidity","Main","current","daily","hourly","cityState","localRegion","convertTempToFahrenheit","convertTempToCelsius","speed","toFixed","roundNumber","time","toLocaleTimeString","hour","minute","feels_like","slice","map","headers","Headers","append","requestOptions","method","redirect","formControl","minWidth","selectEmpty","Search","location","setLocation","setCityState","setWeather","region","setRegion","setState","setCity","regionList","setRegionList","stateList","setStateList","cityList","setCityList","stateDisabled","cityDisabled","btnDisabled","useEffect","a","fetch","then","response","json","result","catch","error","console","log","fetchRegion","fetchState","fetchCity","lat","lng","process","weatherData","fetchWeather","getLatLng","data","results","geometry","latLng","elevation","onSubmit","e","preventDefault","align","component","lg","FormControl","InputLabel","Select","labelId","value","target","autoWidth","sort","b","nameA","name","toUpperCase","nameB","MenuItem","iso2","disabled","Button","type","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.018a2716.chunk.js","sourcesContent":["import Switch from '@material-ui/core/Switch';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst ToggleButton = ({ convertToFahrenheit, setConvertToFahrenheit }) => {\n  //* Toggle the convert variable by switching the current state of that variable\n  const toggleConversion = () => {\n    setConvertToFahrenheit(!convertToFahrenheit);\n  };\n\n  //* Component responsible for toggling the currently displayed temperature\n  return (\n    <Grid container sm={12} md={12} direction='row'>\n      <Grid item>\n        {/* //* Temperature toggle buttons */}\n        <Typography>C</Typography>{' '}\n      </Grid>\n      <Grid item>\n        <Switch\n          color='primary'\n          checked={convertToFahrenheit}\n          onChange={toggleConversion}\n        />{' '}\n      </Grid>\n      <Grid item>\n        <Typography>F</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ToggleButton;\n","import Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport Modal from '@material-ui/core/Modal';\nimport ToggleButton from '../components/ToggleButton';\n// import HourlyGraph from '../components/HourlyGraph';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useState } from 'react';\n\n//* Styles used for material ui elements\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: 250,\n    padding: theme.spacing(2),\n  },\n  modal: {\n    margin: 'auto',\n    marginTop: '2vh',\n    width: '90vw',\n    padding: '4rem',\n  },\n}));\n\n//* Day component props\nconst Day = ({\n  day,\n  city,\n  state,\n  timezone,\n  convertToFahrenheit,\n  setConvertToFahrenheit,\n  convertTemp,\n  convertSpeed,\n  localizeShortDate,\n  localizeTime,\n  imageURL,\n  Sunset,\n  Sunrise,\n}) => {\n  //* State variables\n  // State variable to open & close the modal window\n  const [open, setOpen] = useState(false);\n\n  //* Local variables\n  const classes = useStyles();\n\n  //* Functions\n  //* function used to open the modal\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  //* Function used to close the modal\n  const handleClose = () => {\n    setOpen(false);\n  };\n  //* Take a datetime object and convert it to a localized date string for use in the modal view\n  const modalDate = (date) => {\n    return new Date(date * 1000).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      timeZone: timezone,\n    });\n  };\n\n  //* Day component return\n  return (\n    <Grid item>\n      {/* //* Wrap the day view in a button that will open up the modal */}\n      <ButtonBase focusRipple onClick={handleOpen}>\n        <Paper className={classes.paper}>\n          <Grid item container spacing={2} direction='column'>\n            {/* //* Weather icon */}\n            <Grid item xs>\n              <img alt='weather icon' src={imageURL(day.weather[0].icon, 2)} />\n            </Grid>\n            {/* //* Day of the week */}\n            <Grid item xs>\n              <Typography variant='h4'>{localizeShortDate(day.dt)}</Typography>\n            </Grid>\n\n            <Grid container direction='row' spacing={2}>\n              {/* //* Highs */}\n              <Grid item xs>\n                <Typography variant='subtitle1'>High</Typography>\n                <Typography variant='subtitle2'>\n                  {convertTemp(day.temp.max)}\n                </Typography>\n              </Grid>\n              {/* //* Lows */}\n              <Grid item xs>\n                <Typography variant='subtitle1'>Low</Typography>\n                <Typography variant='subtitle2'>\n                  {convertTemp(day.temp.min)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid container direction='column' spacing={2}>\n              {/* //* Weather description */}\n              <Grid item xs>\n                <Typography variant='subtitle1'>Conditions</Typography>\n                <Typography variant='subtitle2'>\n                  {day.weather[0].description}\n                </Typography>\n              </Grid>\n              {/* //* Winds */}\n              <Grid item xs>\n                <Typography variant='subtitle1'>Winds</Typography>\n                <Typography variant='subtitle2'>{`${\n                  day.wind_deg\n                }° at ${convertSpeed(day.wind_speed)}`}</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n      </ButtonBase>\n\n      {/* //* Expanded modal view of selected day */}\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='modal-title'\n        aria-describedby='modal-description'\n      >\n        <Paper className={classes.modal}>\n          <Grid container spacing={2} justify='center' alignItems='center'>\n            <Grid\n              item\n              container\n              spacing={2}\n              justify='center'\n              alignItems='center'\n            >\n              <Grid item container spacing={2}>\n                {/* //* Weather icon */}\n                <Grid item sm={12} md={2}>\n                  {/* // TODO - pass the image in as a variable to prevent loading on each interaction */}\n                  <img\n                    alt='weather icon'\n                    src={imageURL(day.weather[0].icon, 4)}\n                  />\n                </Grid>\n                {/* //* Header */}\n                <Grid item sm={12} md={6}>\n                  {/* //* City, state, and day date & time */}\n                  <Typography\n                    variant='h1'\n                    id='modal-title'\n                  >{`${city}, ${state}`}</Typography>\n                  <Typography variant='h2' id='modal-description'>\n                    {modalDate(day.dt)}\n                  </Typography>\n                </Grid>\n                {/* //* Toggle Button that handles the temperature change */}\n                <Grid item sm={12} md={2}>\n                  <ToggleButton\n                    convertToFahrenheit={convertToFahrenheit}\n                    setConvertToFahrenheit={setConvertToFahrenheit}\n                  />\n                </Grid>\n                {/* //* Close button */}\n                <Grid item sm={12} md={2}>\n                  <IconButton\n                    aria-label='close modal'\n                    color='primary'\n                    onClick={handleClose}\n                  >\n                    <CancelIcon fontSize='large' />\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n\n            <Grid\n              item\n              container\n              spacing={2}\n              justify='center'\n              alignItems='center'\n            >\n              <Grid item sm={12} container spacing={2}>\n                {/* //* Sunrise time */}\n                <Grid item xs>\n                  <Sunrise size='3em' title='sunrise icon' />\n                  <Typography variant='subtitle1'>Sunrise</Typography>\n                  <Typography variant='subtitle2'>\n                    {localizeTime(day.sunrise)}\n                  </Typography>\n                </Grid>\n                {/* //* Sunset time */}\n                <Grid item xs>\n                  <Sunset size='3em' title='sunset icon' />\n                  <Typography variant='subtitle1'>Sunset</Typography>\n                  <Typography variant='subtitle2'>\n                    {localizeTime(day.sunset)}\n                  </Typography>\n                </Grid>\n              </Grid>\n\n              <Grid item sm={12} container spacing={2}>\n                {/* //* Highs */}\n                <Grid item xs={4}>\n                  <Typography variant='subtitle1'>High</Typography>\n                  <Typography variant='subtitle2'>\n                    {convertTemp(day.temp.max)}\n                  </Typography>\n                </Grid>\n                {/* //* Lows */}\n                <Grid item xs={4}>\n                  <Typography variant='subtitle1'>Low</Typography>\n                  <Typography variant='subtitle2'>\n                    {convertTemp(day.temp.min)}\n                  </Typography>\n                </Grid>\n                {/* //* Weather description */}\n                <Grid item xs={4}>\n                  <Typography variant='subtitle1'>Conditions</Typography>\n                  <Typography variant='subtitle2'>\n                    {day.weather[0].description}\n                  </Typography>\n                </Grid>\n                {/* //* Winds */}\n                <Grid item xs={4}>\n                  <Typography variant='subtitle1'>Winds</Typography>\n                  <Typography variant='subtitle2'>{`${\n                    day.wind_deg\n                  }° at ${convertSpeed(day.wind_speed)}`}</Typography>\n                </Grid>\n                {/* //* Pressure */}\n                <Grid item xs={4}>\n                  <Typography variant='subtitle1'>Pressure</Typography>\n                  <Typography variant='subtitle2'>{`${day.pressure} hPa`}</Typography>\n                </Grid>\n                {/* //* Humidity */}\n                <Grid item xs={4}>\n                  <Typography variant='subtitle1'>Humidity</Typography>\n                  <Typography variant='subtitle2'>{`${day.humidity}%`}</Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n\n            {/* // TODO - add this component in once it is complete */}\n            {/* <Grid\n              item\n              container\n              spacing={2}\n              justify='center'\n              alignItems='center'\n            > */}\n            {/* //* Hourly chart */}\n            {/* <Grid item xs> */}\n            {/* <HourlyGraph dayTemps={day.temp} /> */}\n            {/* </Grid> */}\n            {/* </Grid> */}\n          </Grid>\n        </Paper>\n      </Modal>\n    </Grid>\n  );\n};\n\nexport default Day;\n","import Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Day from './Day';\nimport ToggleButton from './ToggleButton';\n// import HourlyGraph from '../components/HourlyGraph';\nimport { useState } from 'react';\nimport { WiSunset as Sunset, WiSunrise as Sunrise } from 'react-icons/wi';\n\nconst Main = ({\n  //* Props\n  weather: { current, daily, hourly, timezone },\n  cityState: { city, state },\n}) => {\n  //* State variables\n  // Variable used to toggle whether conversion is applied to fahrenheit\n  const [convertToFahrenheit, setConvertToFahrenheit] = useState(true);\n\n  //* Local Variables\n  // Region variable for localized region\n  const localRegion = 'en-US'; // can be used later to change region to users current region\n\n  //* Functions\n  //* Function that will convert the kelvin temperature from the API to either F/C depending on the toggle switch\n  const convertTemp = (temp) => {\n    return convertToFahrenheit\n      ? `${convertTempToFahrenheit(temp)}° F`\n      : `${convertTempToCelsius(temp)}° C`;\n  };\n  //* Function that will convert speed based on whether F/C is selected\n  const convertSpeed = (speed) => {\n    return convertToFahrenheit\n      ? `${(speed * 2.237).toFixed(2)} mph`\n      : `${speed} m/s`;\n  };\n  //* Converts kelvin to celsius\n  const convertTempToCelsius = (temp) => {\n    return roundNumber(temp - 273.15);\n  };\n  //* Converts kelvin to fahrenheit\n  const convertTempToFahrenheit = (temp) => {\n    return roundNumber(((temp - 273.15) * 9) / 5 + 32);\n  };\n  //* Rounds a number to a fixed length of 2 digits after a decimal\n  const roundNumber = (temp) => {\n    return temp.toFixed(2);\n  };\n  //* Take a datetime object and convert it to a localized date string\n  const localizeDate = (date) => {\n    return new Date(date * 1000).toLocaleDateString(localRegion, {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZone: timezone,\n    });\n  };\n  //* Take a datetime object and convert it to a localized date string with just the day of the week\n  const localizeShortDate = (date) => {\n    return new Date(date * 1000).toLocaleDateString(localRegion, {\n      weekday: 'long',\n      timeZone: timezone,\n    });\n  };\n  //* Take a datetime object and convert it to a localized time string\n  const localizeTime = (time) => {\n    return new Date(time * 1000).toLocaleTimeString(localRegion, {\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZone: timezone,\n    });\n  };\n  //* Take in the icon and return the image from the URL\n  const imageURL = (icon, size) => {\n    return `https://openweathermap.org/img/wn/${icon}@${size}x.png`;\n  };\n\n  //* Return statement\n  return (\n    <div>\n      <Grid container spacing={2} justify='center' alignItems='center'>\n        <Grid container spacing={2}>\n          {/* //* Weather icon */}\n          <Grid item sm={12} md={2}>\n            <img\n              alt='weather icon'\n              src={imageURL(current.weather[0].icon, 4)}\n            />\n          </Grid>\n          {/* //* City, state, and current date & time */}\n          <Grid item sm={12} md={8}>\n            <Typography variant='h1'>{`${city}, ${state}`}</Typography>\n            <Typography variant='h2'>{localizeDate(current.dt)}</Typography>\n          </Grid>\n          {/* //* Toggle Button that handles the temperature change */}\n          <Grid item sm={12} md={2}>\n            <ToggleButton\n              convertToFahrenheit={convertToFahrenheit}\n              setConvertToFahrenheit={setConvertToFahrenheit}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid container spacing={2} justify='space-around' alignItems='center'>\n        <Grid item sm={12} md={4} container spacing={2}>\n          {/* //* Sunrise time */}\n          <Grid item xs={6}>\n            <Sunrise size='3em' title='sunrise icon' />\n            <Typography variant='subtitle1'>Sunrise</Typography>\n            <Typography variant='subtitle2'>\n              {localizeTime(current.sunrise)}\n            </Typography>\n          </Grid>\n          {/* //* Sunset time */}\n          <Grid item xs={6}>\n            <Sunset size='3em' title='sunset icon' />\n            <Typography variant='subtitle1'>Sunset</Typography>\n            <Typography variant='subtitle2'>\n              {localizeTime(current.sunset)}\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <Grid item sm={12} md={8} container spacing={2} justify='space-around'>\n          {/* //* Current temperature */}\n          <Grid item xs={4}>\n            <Typography variant='subtitle1'>Current Temp.</Typography>\n            <Typography variant='subtitle2'>\n              {convertTemp(current.temp)}\n            </Typography>\n          </Grid>\n          {/* //* Feel temp */}\n          <Grid item xs={4}>\n            <Typography variant='subtitle1'>Feels Like</Typography>\n            <Typography variant='subtitle2'>\n              {convertTemp(current.feels_like)}\n            </Typography>\n          </Grid>\n          {/* //* Weather description */}\n          <Grid item xs={4}>\n            <Typography variant='subtitle1'>Conditions</Typography>\n            <Typography variant='subtitle2'>\n              {current.weather[0].description}\n            </Typography>\n          </Grid>\n          {/* //* Winds */}\n          <Grid item xs={4}>\n            <Typography variant='subtitle1'>Winds</Typography>\n            <Typography variant='subtitle2'>{`${\n              current.wind_deg\n            }° at ${convertSpeed(current.wind_speed)}`}</Typography>\n          </Grid>\n          {/* //* Pressure */}\n          <Grid item xs={4}>\n            <Typography variant='subtitle1'>Pressure</Typography>\n            <Typography variant='subtitle2'>{`${current.pressure} hPa`}</Typography>\n          </Grid>\n          {/* //* Humidity */}\n          <Grid item xs={4}>\n            <Typography variant='subtitle1'>Humidity</Typography>\n            <Typography variant='subtitle2'>{`${current.humidity}%`}</Typography>\n          </Grid>\n        </Grid>\n\n        {/* // TODO - add this component in once it is complete */}\n        {/* <Grid item sm={12} md={6} container spacing={2}> */}\n        {/* //* Hourly chart */}\n        {/* <Grid item xs> */}\n        {/* <HourlyGraph hourly={hourly} /> */}\n        {/* </Grid> */}\n        {/* </Grid> */}\n      </Grid>\n\n      <Grid container spacing={2} justify='space-evenly'>\n        {/* //* Slice the daily weather array to show the coming 5 days, then map through the days to show the day component for the upcoming weather */}\n        {daily.slice(1, 6).map((day) => (\n          <Day\n            key={day.dt}\n            day={day}\n            city={city}\n            state={state}\n            timezone={timezone}\n            convertToFahrenheit={convertToFahrenheit}\n            setConvertToFahrenheit={setConvertToFahrenheit}\n            convertTemp={convertTemp}\n            convertSpeed={convertSpeed}\n            localizeShortDate={localizeShortDate}\n            localizeTime={localizeTime}\n            imageURL={imageURL}\n            Sunset={Sunset}\n            Sunrise={Sunrise}\n          />\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Main;\n","import Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { useState, useEffect } from 'react';\n\n//* Header and options used for the country-city-state API\nconst headers = new Headers();\nheaders.append(\n  'X-CSCAPI-KEY',\n  'Tmk3R2VmamRvWEsxbUpHREFSWHlSRW5pZ050Q2QwMVBPdjRTdGFVRA=='\n);\nconst requestOptions = {\n  method: 'GET',\n  headers: headers,\n  redirect: 'follow',\n};\n\n//* Styles used for customizing the material-ui components\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 250,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  paper: {\n    margin: theme.spacing(2),\n    padding: theme.spacing(5),\n  },\n}));\n\n//* Search component with props\nconst Search = ({ location, setLocation, setCityState, setWeather }) => {\n  //* Styling for material elements\n  const classes = useStyles();\n\n  //* State variables used in search component\n  const [region, setRegion] = useState('');\n  const [state, setState] = useState('');\n  const [city, setCity] = useState('');\n  const [regionList, setRegionList] = useState();\n  const [stateList, setStateList] = useState();\n  const [cityList, setCityList] = useState();\n\n  //* Variables used to enable/disable inputs/buttons\n  let stateDisabled = !stateList,\n    cityDisabled = !cityList,\n    btnDisabled = !city;\n\n  // useEffect functions\n  //* Fetch the region list on initial load of the App component\n  useEffect(() => {\n    const fetchRegion = async () => {\n      await fetch(\n        'https://api.countrystatecity.in/v1/countries',\n        requestOptions\n      )\n        .then((response) => response.json())\n        .then((result) => setRegionList(result))\n        .catch((error) => console.log('error', error));\n    };\n\n    fetchRegion();\n  }, []);\n  //* Fetch the state list after the region has been set\n  useEffect(() => {\n    const fetchState = async () => {\n      await fetch(\n        `https://api.countrystatecity.in/v1/countries/${region}/states`,\n        requestOptions\n      )\n        .then((response) => response.json())\n        .then((result) => setStateList(result))\n        .catch((error) => console.log('error', error));\n    };\n\n    if (region) {\n      fetchState();\n    }\n  }, [region]);\n  //* Fetch the city list after the state has been set\n  useEffect(() => {\n    const fetchCity = async () => {\n      await fetch(\n        `https://api.countrystatecity.in/v1/countries/${region}/states/${state}/cities`,\n        requestOptions\n      )\n        .then((response) => response.json())\n        .then((result) => setCityList(result))\n        .catch((error) => console.log('error', error));\n    };\n\n    if (state) {\n      fetchCity();\n    }\n  }, [state, region]);\n  //* Fetch the weather data after the lat lng has been retrieved from the Google API\n  useEffect(() => {\n    // Async function to get weather data for the users input location\n    const fetchWeather = async () => {\n      await fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${location.lat}&lon=${location.lng}&exclude=minutely&appid=${process.env.REACT_APP_API_KEY}`\n      )\n        .then((response) => response.json())\n        // Call the function to set the weather state\n        .then((weatherData) => setWeather({ ...weatherData }))\n        // Handle any errors\n        .catch((error) => console.log(`Error: ${error}`));\n    };\n\n    if (location) {\n      fetchWeather();\n    }\n  }, [location]);\n\n  //* onChange functions to set state\n  const handleRegionChange = (e) => {\n    setRegion(e.target.value);\n  };\n  const handleStateChange = (e) => {\n    setState(e.target.value);\n  };\n  const handleCityChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  //* Handle the form submission\n  const submitForm = (e) => {\n    e.preventDefault();\n\n    setCityState({ city, state });\n    // fetch lat lng location from google API\n    getLatLng();\n\n    // Clear the search form fields by clearing the state variables\n    setRegion('');\n    setState('');\n    setCity('');\n  };\n\n  //* Get latitude & longitude from address using google maps geocode API\n  const getLatLng = async () => {\n    await fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?address=${city},+${state},+${region}&key=${process.env.REACT_APP_GOOGLE_API_KEY}`\n    )\n      .then((response) => response.json())\n      .then((data) => data.results[0].geometry.location)\n      .then((latLng) => setLocation({ ...latLng }))\n      .catch((error) => console.error(error));\n  };\n\n  return (\n    <div>\n      {/* //* Check if the region list is loaded, if not show loading, if it is show the form */}\n      {!regionList ? (\n        // TODO - Create a loading component while waiting for regions\n        'Loading'\n      ) : (\n        <Paper elevation={3} className={classes.paper}>\n          <form onSubmit={submitForm}>\n            <Grid\n              container\n              spacing={2}\n              justify='center'\n              align='center'\n              width='auto'\n            >\n              <Grid item sm={12}>\n                <Typography variant='h3' component='h2'>\n                  Weather Search\n                </Typography>\n              </Grid>\n              <Grid item sm={12} md={6} lg={3}>\n                <FormControl className={classes.formControl}>\n                  <InputLabel id='region-label'>Region</InputLabel>\n                  <Select\n                    labelId='region-label'\n                    id='region'\n                    value={region}\n                    onChange={handleRegionChange}\n                    autoWidth\n                    className={classes.selectEmpty}\n                  >\n                    {/* //* Map through the regions & show them as select inputs */}\n                    {regionList\n                      .sort((a, b) => {\n                        // Change the names to uppercase so they can be compared\n                        const nameA = a.name.toUpperCase();\n                        const nameB = b.name.toUpperCase();\n\n                        // Return statement that compares if a < b / a > b / returns 0 if they are the same this ensures they are sorted properly\n                        return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;\n                      })\n                      .map((region) => (\n                        <MenuItem key={region.id} value={region.iso2}>\n                          {region.name}\n                        </MenuItem>\n                      ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item sm={12} md={6} lg={3}>\n                <FormControl className={classes.formControl}>\n                  <InputLabel id='state-label'>State</InputLabel>\n                  <Select\n                    disabled={stateDisabled}\n                    labelId='state-label'\n                    id='state'\n                    value={state}\n                    onChange={handleStateChange}\n                    autoWidth\n                    className={classes.selectEmpty}\n                  >\n                    {/* //* Map through the states */}\n                    {stateList\n                      ? stateList\n                          .sort((a, b) => {\n                            // Change the names to uppercase so they can be compared\n                            const nameA = a.name.toUpperCase();\n                            const nameB = b.name.toUpperCase();\n\n                            // Return statement that compares if a < b / a > b / returns 0 if they are the same this ensures they are sorted properly\n                            return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;\n                          })\n                          .map((state) => (\n                            <MenuItem key={state.id} value={state.iso2}>\n                              {state.name}\n                            </MenuItem>\n                          ))\n                      : ''}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item sm={12} md={6} lg={3}>\n                <FormControl className={classes.formControl}>\n                  <InputLabel id='city-label'>City</InputLabel>\n                  <Select\n                    disabled={cityDisabled}\n                    labelId='city-label'\n                    id='city'\n                    value={city}\n                    onChange={handleCityChange}\n                    autoWidth\n                    className={classes.selectEmpty}\n                  >\n                    {/* //* Map through the cities */}\n                    {cityList\n                      ? cityList\n                          .sort((a, b) => {\n                            // Change the names to uppercase so they can be compared\n                            const nameA = a.name.toUpperCase();\n                            const nameB = b.name.toUpperCase();\n\n                            // Return statement that compares if a < b / a > b / returns 0 if they are the same this ensures they are sorted properly\n                            return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;\n                          })\n                          .map((city) => (\n                            <MenuItem key={city.id} value={city.name}>\n                              {city.name}\n                            </MenuItem>\n                          ))\n                      : ''}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item sm={12} md={6} lg={3}>\n                <Button\n                  disabled={btnDisabled}\n                  className={classes.formControl}\n                  id='search-btn'\n                  variant='contained'\n                  type='submit'\n                >\n                  Search\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Paper>\n      )}\n    </div>\n  );\n};\n\nexport default Search;\n","import { useState } from 'react';\nimport Main from './components/Main';\nimport Search from './components/Search';\n\nfunction App() {\n  //* State variables used in the App component\n  const [location, setLocation] = useState();\n  const [cityState, setCityState] = useState();\n  const [weather, setWeather] = useState();\n\n  return (\n    <div className='container'>\n      {/* //* Check if the weather state has data, if it does show the main weather component, if not show the search component */}\n      {weather ? (\n        <Main weather={weather} cityState={cityState} />\n      ) : (\n        <Search\n          location={location}\n          setLocation={setLocation}\n          setCityState={setCityState}\n          setWeather={setWeather}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}